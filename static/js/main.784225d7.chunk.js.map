{"version":3,"sources":["assets/img/earth_daymap.jpg","assets/img/earth_nightmap.jpg","components/globe/Globe.js","components/CountdownTimer.js","components/Home.js","App.js","reportWebVitals.js","index.js"],"names":["Globe","mountRef","useRef","useEffect","shaders","scene","THREE","group","mount","current","Promise","resolve","reject","manager","textures","loader","day","dayMap","night","nightMap","Object","keys","map","key","index","load","then","result","document","getElementById","classList","add","light","position","set","globe","vertexShader","fragmentShader","uniforms","sunPosition","type","value","dayTexture","nightTexture","atmosphere","blending","side","scale","starGeometry","starMaterial","color","starVertices","i","x","Math","random","y","z","push","x2","y2","z2","setAttribute","stars","sizes","width","window","innerWidth","height","innerHeight","addEventListener","camera","aspect","updateProjectionMatrix","renderer","setSize","setPixelRatio","min","devicePixelRatio","alpha","antialias","appendChild","domElement","clock","tick","elapsedTime","getElapsedTime","rotation","render","requestAnimationFrame","id","className","ref","CountdownTimer","calculateTimeLeft","difference","Date","timeLeft","d","floor","h","m","s","useState","setTimeLeft","setTimeout","timerComponents","forEach","interval","length","Home","t","App","style","display","flexDirection","alignItems","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode"],"mappings":"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","file":"static/js/main.784225d7.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/earth_daymap.981cc3e3.jpg\";","export default __webpack_public_path__ + \"static/media/earth_nightmap.36f11e5e.jpg\";","import React, { useRef, useEffect } from \"react\";\nimport * as THREE from \"three\";\nimport dayMap from \"../../assets/img/earth_daymap.jpg\";\nimport nightMap from \"../../assets/img/earth_nightmap.jpg\";\n\nfunction Globe() {\n    const mountRef = useRef(null);\n\n    useEffect(() => {\n        const shaders = {\n            globeVertex: `\n                varying vec2 vPosition;\n                varying vec3 vNormal;\n                varying vec3 vVertToLight;\n                uniform vec3 sunPosition;\n    \n                void main() {\n                    vPosition = uv;\n                    vNormal = normalMatrix * normal;\n                    vec4 worldPosition = modelViewMatrix * vec4(position, 1.0);\n                    vVertToLight = normalize(sunPosition - worldPosition.xyz);\n                    gl_Position = projectionMatrix * worldPosition;\n                }\n            `,\n            globeFragment: `\n                uniform sampler2D dayTexture;\n                uniform sampler2D nightTexture;\n                varying vec2 vPosition;\n                varying vec3 vNormal;\n                varying vec3 vVertToLight;\n    \n                void main( void ) {\n                    vec3 dayColor = texture2D(dayTexture, vPosition).rgb;\n                    vec3 nightColor = texture2D(nightTexture, vPosition).rgb;\n                    vec3 fragToLight = normalize(vVertToLight);\n                    float cosineAngleSunToNormal = dot(normalize(vNormal), fragToLight);\n                    cosineAngleSunToNormal = clamp(cosineAngleSunToNormal * 10.0, -1.0, 1.0);\n                    float mixAmount = cosineAngleSunToNormal * 0.5 + 0.5;\n                    vec3 color = mix(nightColor, dayColor, mixAmount);\n    \n                    gl_FragColor = vec4( color, 1.0 );\n    \n                }\n            `,\n            atmosphereVertex: `\n                varying vec3 vertextNormal;\n                void main() {\n                    vertextNormal = normalize(normalMatrix * normal); // default variable given by threejs\n                    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n                } \n            `,\n            atmosphereFragment: `\n            varying vec3 vertextNormal;\n            void main() {\n                float intensity = pow(0.6 - dot(vertextNormal, vec3(0, 0, 1.0)), 2.0);\n                gl_FragColor = vec4(0.3, 0.6, 1.0, 1.0) * intensity;\n            }\n        `,\n        };\n\n        // Scence and Camera\n        const scene = new THREE.Scene();\n        const group = new THREE.Group();\n        const mount = mountRef.current;\n\n        // Loading Manager for Textures\n        const getTextures = () =>\n            new Promise((resolve, reject) => {\n                const manager = new THREE.LoadingManager(() =>\n                    resolve(textures)\n                );\n                const loader = new THREE.TextureLoader(manager);\n\n                const textures = {\n                    day: dayMap,\n                    night: nightMap,\n                };\n\n                Object.keys(textures).map(function (key, index) {\n                    return (textures[key] = loader.load(textures[key]));\n                });\n            });\n\n        getTextures().then((result) => {\n            // hide loader\n            const loadingScreen = document.getElementById(\"loading-screen\");\n            loadingScreen.classList.add(\"fade-out\");\n\n            // Lighting\n            const light = new THREE.DirectionalLight(0xffffff, 1);\n            light.position.set(5, 3, -4.5);\n\n            // Globe\n            const globe = new THREE.Mesh(\n                new THREE.SphereGeometry(5, 50, 50),\n                new THREE.ShaderMaterial({\n                    vertexShader: shaders.globeVertex,\n                    fragmentShader: shaders.globeFragment,\n                    uniforms: {\n                        sunPosition: { type: \"v3\", value: light.position },\n                        dayTexture: { type: \"t\", value: result.day },\n                        nightTexture: { type: \"t\", value: result.night },\n                    },\n                })\n            );\n\n            // Atmosphere\n            const atmosphere = new THREE.Mesh(\n                new THREE.SphereGeometry(5, 50, 50),\n                new THREE.ShaderMaterial({\n                    vertexShader: shaders.atmosphereVertex,\n                    fragmentShader: shaders.atmosphereFragment,\n                    blending: THREE.AdditiveBlending,\n                    side: THREE.BackSide,\n                })\n            );\n            atmosphere.scale.set(1.1, 1.1, 1.1);\n\n            // Group globe atmosphere and lighting\n            group.add(globe);\n            group.add(atmosphere);\n            group.add(light);\n            scene.add(group);\n\n            // Stars\n            const starGeometry = new THREE.BufferGeometry();\n            const starMaterial = new THREE.PointsMaterial({\n                color: 0xffffff,\n            });\n\n            // generate stars position\n            const starVertices = [];\n            for (let i = 0; i < 5000; i++) {\n                // behind front\n                const x = (Math.random() - 0.5) * 2000;\n                const y = (Math.random() - 0.5) * 2000;\n                const z = Math.random() * 2000;\n                starVertices.push(x, y, z);\n\n                // behind stars\n                const x2 = (Math.random() - 0.5) * 2000;\n                const y2 = (Math.random() - 0.5) * 2000;\n                const z2 = -Math.random() * 2000;\n                starVertices.push(x2, y2, z2);\n            }\n\n            starGeometry.setAttribute(\n                \"position\",\n                new THREE.Float32BufferAttribute(starVertices, 3)\n            );\n\n            const stars = new THREE.Points(starGeometry, starMaterial);\n            scene.add(stars);\n        });\n\n        // Size\n        const sizes = {\n            width: window.innerWidth,\n            height: window.innerHeight,\n        };\n\n        window.addEventListener(\"resize\", () => {\n            // Update sizes\n            sizes.width = window.innerWidth;\n            sizes.height = window.innerHeight;\n\n            // Update camera\n            camera.aspect = sizes.width / sizes.height;\n            camera.updateProjectionMatrix();\n\n            // Update renderer\n            renderer.setSize(sizes.width, sizes.height);\n            renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\n        });\n\n        // Camera\n        const camera = new THREE.PerspectiveCamera(\n            75,\n            sizes.width / sizes.height,\n            0.1,\n            1000\n        );\n        camera.position.z = 12;\n\n        // Renderer\n        const renderer = new THREE.WebGLRenderer({\n            alpha: true,\n            antialias: true,\n        });\n        renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\n        renderer.setSize(sizes.width, sizes.height);\n        mountRef.current.appendChild(renderer.domElement);\n\n        // Controls\n        // const controls = new OrbitControls(camera, canvas)\n        // controls.enableDamping = true\n\n        // Animate\n        // for Interactions\n        // let mouseX = 0\n        // let mouseY = 0\n\n        // let targetX = 0\n        // let targetY = 0\n\n        // const windowX = window.innerWidth / 2;\n        // const windowY = window.innerHeight / 2;\n\n        // const onDocumentMouseMove = (event) => {\n        //     mouseX = (event.clientX - windowX)\n        //     mouseY = (event.clientY - windowY)\n        // }\n        // document.addEventListener('mousemove', onDocumentMouseMove)\n\n        // Move sphere to top slowing while scrolling\n        // const updateSphere = (event) => {\n        //   group.position.y = window.scrollY * 0.001\n        // }\n        // window.addEventListener('scroll', updateSphere)\n\n        const clock = new THREE.Clock();\n        const tick = () => {\n            // targetX = mouseX * 0.001\n            // targetY = mouseY * 0.001\n\n            const elapsedTime = clock.getElapsedTime();\n\n            // Update objects\n            group.rotation.y = 0.15 * elapsedTime;\n            // group.rotation.y += 0.5 * (targetX - group.rotation.y)\n            // group.rotation.x += 0.05 * (targetY - group.rotation.x)\n            // group.position.z += -0.05 * (targetY - group.rotation.x)\n\n            // Render\n            renderer.render(scene, camera);\n\n            // Call tick again on the next frame\n            window.requestAnimationFrame(tick);\n        };\n\n        tick();\n\n        return () => {\n            mountRef.current = mount;\n        };\n    }, []);\n\n    return (\n        <div>\n            <section id=\"loading-screen\">\n                <div id=\"loader\"></div>\n            </section>\n\n            <div className=\"globeContainer\" ref={mountRef}></div>\n        </div>\n    );\n}\n\nexport default Globe;\n","import React, { useState, useEffect } from \"react\";\n\nfunction CountdownTimer() {\n    const calculateTimeLeft = () => {\n        const difference = +new Date(\"DEC 19, 2021 23:59:59\") - +new Date();\n        let timeLeft = {};\n\n        // Time calculations for days, hours, minutes and seconds\n        if (difference > 0) {\n            timeLeft = {\n                d: Math.floor(difference / (1000 * 60 * 60 * 24)),\n                h: Math.floor(\n                    (difference % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)\n                ),\n                m: Math.floor((difference % (1000 * 60 * 60)) / (1000 * 60)),\n                s: Math.floor((difference % (1000 * 60)) / 1000),\n            };\n        }\n\n        return timeLeft;\n    };\n\n    const [timeLeft, setTimeLeft] = useState(calculateTimeLeft());\n\n    useEffect(() => {\n        setTimeout(() => {\n            setTimeLeft(calculateTimeLeft());\n        }, 1000);\n    });\n\n    const timerComponents = [];\n    Object.keys(timeLeft).forEach((interval) => {\n        // if (!timeLeft[interval]) {\n        //     return;\n        // }\n\n        timerComponents.push(\n            <span key={interval + \" \" + timeLeft[interval]}>\n                {timeLeft[interval]}\n                {interval}{\" \"}\n            </span>\n        );\n    });\n\n    return (\n        <div className=\"container\">\n            <h1>\n                {\" \"}\n                {timerComponents.length ? (\n                    timerComponents\n                ) : (\n                    <span>Time's up!</span>\n                )}\n            </h1>\n        </div>\n    );\n}\n\nexport default CountdownTimer;\n","import React from 'react';\nimport Globe from './globe/Globe'\nimport CountdownTimer from './CountdownTimer'\n\nfunction Home ( {t} ) {\n    return (\n        <div>\n            <CountdownTimer />\n            <Globe />\n        </div>\n    )\n}\n\nexport default Home;\n","import './App.css';\nimport Home from './components/Home';\n\nfunction App() {\n  return (\n    <div\n      className=\"App\"\n      style={{\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\"\n      }}\n    >\n      <Home />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}